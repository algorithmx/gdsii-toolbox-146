name: WASM GDSII Parser CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build-type: [debug, release]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake valgrind

    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache
          build/
        key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build-type }}-${{ hashFiles('**/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build-type }}-
          ${{ runner.os }}-${{ matrix.compiler }}-

    - name: Setup compiler
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        fi

    - name: Configure build type
      run: |
        if [ "${{ matrix.build-type }}" = "debug" ]; then
          echo "CFLAGS=-Wall -Wextra -std=c99 -g -O0 -DDEBUG" >> $GITHUB_ENV
        else
          echo "CFLAGS=-Wall -Wextra -std=c99 -O2 -DNDEBUG" >> $GITHUB_ENV
        fi

    - name: Build project
      working-directory: ./wasm-glue
      run: |
        cd tests
        make clean-all
        make check-deps
        make build-all

    - name: Run unit tests
      working-directory: ./wasm-glue/tests
      run: |
        make test-unit || exit 1

    - name: Run error handling tests
      working-directory: ./wasm-glue/tests
      run: |
        make test-error || exit 1

    - name: Run integration tests
      working-directory: ./wasm-glue/tests
      run: |
        make test-integration || exit 1

    - name: Run stress tests (with timeout)
      working-directory: ./wasm-glue/tests
      timeout-minutes: 10
      run: |
        make test-stress || exit 1

    - name: Run coverage analysis
      working-directory: ./wasm-glue/tests
      run: |
        make coverage || echo "Coverage analysis failed (optional)"

    - name: Memory leak check (Valgrind)
      working-directory: ./wasm-glue/tests
      run: |
        if command -v valgrind >/dev/null 2>&1; then
          echo "Running memory leak checks..."

          # Check unit tests for memory leaks
          for test in unit/test-*; do
            if [ -x "$test" ]; then
              echo "Checking $test for memory leaks..."
              timeout 30s valgrind --leak-check=full --error-exitcode=1 ./"$test" || exit 1
            fi
          done
        else
          echo "Valgrind not available, skipping memory leak tests"
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.compiler }}-${{ matrix.build-type }}
        path: |
          wasm-glue/tests/*.log
          wasm-glue/tests/test-results.txt
          wasm-glue/tests/coverage-report.txt

    - name: Summarize results
      if: always()
      working-directory: ./wasm-glue/tests
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Compiler:** ${{ matrix.compiler }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** ${{ matrix.build-type }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f "test-results.txt" ]; then
          echo "### Test Statistics" >> $GITHUB_STEP_SUMMARY
          grep -E "(Total|Passed|Failed)" test-results.txt >> $GITHUB_STEP_SUMMARY || echo "No test statistics found"
        fi

        if [ -f "coverage-report.txt" ]; then
          echo "### Coverage Analysis" >> $GITHUB_STEP_SUMMARY
          head -20 coverage-report.txt >> $GITHUB_STEP_SUMMARY
        fi

  performance-tests:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Build performance tests
      working-directory: ./wasm-glue/tests
      run: |
        make stress-tests

    - name: Run performance benchmarks
      working-directory: ./wasm-glue/tests
      timeout-minutes: 15
      run: |
        echo "Running performance benchmarks..."
        ./stress/test-large-files > performance-results.txt 2>&1 || exit 1

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: wasm-glue/tests/performance-results.txt

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cppcheck clang-format

    - name: Static code analysis
      working-directory: ./wasm-glue
      run: |
        echo "Running static code analysis..."

        # Cppcheck analysis
        if command -v cppcheck >/dev/null 2>&1; then
          cppcheck --enable=all --std=c99 --xml --xml-version=2 src/ 2> cppcheck-results.xml || echo "Cppcheck completed with warnings"
        fi

        # Code formatting check
        if command -v clang-format >/dev/null 2>&1; then
          find . -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror || echo "Code formatting issues found"
        fi

    - name: Upload code quality results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-results
        path: wasm-glue/cppcheck-results.xml

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Security scan
      working-directory: ./wasm-glue
      run: |
        echo "Running security scan..."

        # Basic security checks
        if find . -name "*.c" -exec grep -l "strcpy\|strcat\|sprintf\|gets" {} \; | grep -q .; then
          echo "Warning: Potentially unsafe functions found"
          find . -name "*.c" -exec grep -l "strcpy\|strcat\|sprintf\|gets" {} \;
        fi

        # Check for hardcoded passwords or keys
        if find . -name "*.c" -o -name "*.h" | xargs grep -i "password\|secret\|key.*=" | grep -v ".example" | grep -q .; then
          echo "Warning: Potential hardcoded secrets found"
        fi

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: wasm-glue/security-scan-results.txt