% Test script for msh package with Gmsh
% Generates a simple 2D mesh and displays statistics

clear all;
close all;

% Load the msh package
pkg load msh;

fprintf('Testing msh package with Gmsh...\n');
fprintf('================================\n\n');

% Generate mesh from .geo file
fprintf('Generating mesh from test_mesh.geo...\n');
[mesh, gmsh_output] = msh2m_gmsh('test_mesh');

fprintf('Mesh generated successfully!\n\n');

% Display mesh statistics
fprintf('Mesh Statistics:\n');
fprintf('----------------\n');
fprintf('Number of nodes: %d\n', size(mesh.p, 1));
fprintf('Number of triangles: %d\n', size(mesh.t, 1));
fprintf('Number of boundary edges: %d\n', size(mesh.e, 1));

% Display coordinate ranges
fprintf('\nCoordinate Ranges:\n');
fprintf('X: [%.3f, %.3f]\n', min(mesh.p(:,1)), max(mesh.p(:,1)));
fprintf('Y: [%.3f, %.3f]\n', min(mesh.p(:,2)), max(mesh.p(:,2)));

% Plot the mesh
fprintf('\nPlotting mesh...\n');
figure('Name', 'Gmsh Test Mesh');

% Plot triangles
triplot(mesh.t(:,1:3), mesh.p(:,1), mesh.p(:,2), 'b-');
hold on;

% Highlight boundary edges
plot(mesh.p(mesh.e(:,1),1), mesh.p(mesh.e(:,1),2), 'r.', 'MarkerSize', 10);

axis equal;
grid on;
xlabel('X');
ylabel('Y');
title('2D Mesh Generated by Gmsh via msh Package');
legend('Mesh', 'Boundary Nodes');

fprintf('\nTest completed successfully!\n');
fprintf('Close the figure window to exit.\n');

% Keep figure open
waitfor(gcf);
