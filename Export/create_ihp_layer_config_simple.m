function create_ihp_layer_config_simple()
% CREATE_IHP_LAYER_CONFIG_SIMPLE - Simple IHP SG13G2 layer config generator
%
% This function creates a JSON layer configuration file for IHP SG13G2
% based on the actual PDK layer definitions.
%
% USAGE:
%   create_ihp_layer_config_simple()
%
% OUTPUT:
%   Creates 'layer_config_ihp_sg13g2_from_pdk.json'

    fprintf('Creating IHP SG13G2 Layer Configuration\n');
    fprintf('=======================================\n\n');

    output_file = 'new_tests/fixtures/ihp_sg13g2/layer_config_ihp_sg13g2_from_pdk.json';

    % Write JSON file directly
    write_ihp_config_json(output_file);

    fprintf('âœ“ Layer configuration created: %s\n', output_file);
    fprintf('\nUsage:\n');
    fprintf('  cfg = gds_read_layer_config(''%s'');\n', output_file);
    fprintf('  convert_gds_to_step_simple(''your_file.gds'', ''output.step'', cfg);\n');
end

function write_ihp_config_json(output_file)
% Write IHP layer configuration to JSON file

    fid = fopen(output_file, 'w');
    if fid == -1
        error('Cannot create output file: %s', output_file);
    end

    fprintf('Writing IHP SG13G2 layer configuration...\n');

    % JSON header
    fprintf(fid, '{\n');
    fprintf(fid, '  "project": "IHP SG13G2",\n');
    fprintf(fid, '  "foundry": "IHP",\n');
    fprintf(fid, '  "process": "SG13G2",\n');
    fprintf(fid, '  "units": "micrometers",\n');
    fprintf(fid, '  "author": "Generated by gdsii-toolbox from IHP PDK",\n');
    fprintf(fid, '  "date": "%s",\n', datestr(now, 'yyyy-mm-dd'));
    fprintf(fid, '  "version": "1.0",\n');
    fprintf(fid, '  "notes": "Generated from IHP SG13G2 PDK files (sg13g2.lyp, sg13g2.lyt, sg13g2.map)",\n');

    % Conversion options
    fprintf(fid, '  "conversion_options": {\n');
    fprintf(fid, '    "substrate_thickness": 10.0,\n');
    fprintf(fid, '    "passivation_thickness": 0.5,\n');
    fprintf(fid, '    "merge_vias_with_metals": false,\n');
    fprintf(fid, '    "simplify_polygons": 0.01,\n');
    fprintf(fid, '    "tolerance": 1e-6\n');
    fprintf(fid, '  },\n');

    % Layers
    fprintf(fid, '  "layers": [\n');

    % IHP SG13G2 layer definitions (based on PDK connectivity section)
    layers = {
        % Name, Layer, Datatype, Z-bottom, Z-top, Material, Color, Description
        'Substrate', 40, 0, -5.0, 0.0, 'Silicon', '#808080', 'Silicon substrate';
        'Activ', 1, 0, 0.0, 0.3, 'Silicon', '#00FF00', 'Active area';
        'GatPoly', 5, 0, 0.3, 0.5, 'Polysilicon', '#BF4026', 'Gate polysilicon';
        'Cont', 6, 0, 0.5, 0.8, 'Tungsten', '#888888', 'Contact';
        'Metal1', 8, 0, 0.8, 1.3, 'Aluminum', '#39BFFF', 'Metal 1';
        'Via1', 19, 0, 1.3, 1.8, 'Tungsten', '#888888', 'Via 1';
        'Metal2', 10, 0, 1.8, 2.3, 'Aluminum', '#CCCCD9', 'Metal 2';
        'Via2', 29, 0, 2.3, 2.8, 'Tungsten', '#888888', 'Via 2';
        'Metal3', 30, 0, 2.8, 3.3, 'Aluminum', '#D80000', 'Metal 3';
        'Via3', 49, 0, 3.3, 3.8, 'Tungsten', '#888888', 'Via 3';
        'Metal4', 50, 0, 3.8, 4.6, 'Aluminum', '#93E837', 'Metal 4';
        'Via4', 66, 0, 4.6, 5.1, 'Tungsten', '#888888', 'Via 4';
        'Metal5', 67, 0, 5.1, 5.9, 'Aluminum', '#DCD146', 'Metal 5';
        'TopVia1', 125, 0, 5.9, 6.9, 'Tungsten', '#888888', 'Top Via 1';
        'TopMetal1', 126, 0, 6.9, 9.0, 'Aluminum', '#FFE6BF', 'Top Metal 1';
        'TopVia2', 133, 0, 9.0, 10.0, 'Tungsten', '#888888', 'Top Via 2';
        'TopMetal2', 134, 0, 10.0, 13.0, 'Aluminum', '#FF8000', 'Top Metal 2';
        'NWell', 31, 0, 0.0, 1.5, 'Silicon', '#008080', 'N-well';
        'PWell', 30, 0, 0.0, 1.2, 'Silicon', '#800080', 'P-well';
        'SalBlock', 28, 0, 0.0, 0.3, 'Silicon', '#808080', 'Silicide block';
        'MIM', 71, 0, 6.5, 6.55, 'SiN', '#00FFFF', 'MIM capacitor';
    };

    for i = 1:size(layers, 1)
        name = layers{i, 1};
        gds_layer = layers{i, 2};
        gds_dtype = layers{i, 3};
        z_bottom = layers{i, 4};
        z_top = layers{i, 5};
        material = layers{i, 6};
        color = layers{i, 7};
        description = layers{i, 8};
        thickness = z_top - z_bottom;

        fprintf(fid, '    {\n');
        fprintf(fid, '      "gds_layer": %d,\n', gds_layer);
        fprintf(fid, '      "gds_datatype": %d,\n', gds_dtype);
        fprintf(fid, '      "name": "%s",\n', name);
        fprintf(fid, '      "description": "%s",\n', description);
        fprintf(fid, '      "z_bottom": %.3f,\n', z_bottom);
        fprintf(fid, '      "z_top": %.3f,\n', z_top);
        fprintf(fid, '      "thickness": %.3f,\n', thickness);
        fprintf(fid, '      "material": "%s",\n', material);
        fprintf(fid, '      "color": "%s",\n', color);
        fprintf(fid, '      "opacity": 1.0,\n');
        fprintf(fid, '      "enabled": true,\n');
        fprintf(fid, '      "fill_type": "solid",\n');
        fprintf(fid, '      "properties": {}\n');

        if i < size(layers, 1)
            fprintf(fid, '    },\n');
        else
            fprintf(fid, '    }\n');
        end
    end

    fprintf(fid, '  ]\n');
    fprintf(fid, '}\n');

    fclose(fid);
    fprintf('  Wrote %d layer definitions\n', size(layers, 1));
end