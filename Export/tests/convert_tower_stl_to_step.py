#!/usr/bin/env python3
"""
Convert Tower Test STL Files to STEP Format

This script converts the STL files generated by test_tower_functionality.m
to STEP format using pythonOCC.

Usage:
    python convert_tower_stl_to_step.py [N]
    
    N : Layer count (default: convert all found tower tests)

Requirements:
    - pythonOCC (install via: conda install -c conda-forge pythonocc-core)

Author:
    WARP AI Agent, October 2025
"""

import sys
import os
import glob
from pathlib import Path

try:
    from OCC.Core.STEPControl import STEPControl_Writer, STEPControl_AsIs
    from OCC.Core.Interface import Interface_Static
    from OCC.Core.IFSelect import IFSelect_RetDone
    from OCC.Core.StlAPI import StlAPI_Reader
    from OCC.Core.TopoDS import TopoDS_Shape, TopoDS_Compound
    from OCC.Core.BRep import BRep_Builder
    from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_Transform
    from OCC.Extend.DataExchange import read_stl_file
    PYTHONOCC_AVAILABLE = True
except ImportError as e:
    PYTHONOCC_AVAILABLE = False
    IMPORT_ERROR = str(e)


def convert_stl_to_step(stl_file, step_file, verbose=True):
    """
    Convert STL file to STEP format using pythonOCC.
    
    Args:
        stl_file: Path to input STL file
        step_file: Path to output STEP file
        verbose: Print progress messages
    
    Returns:
        bool: True if successful, False otherwise
    """
    if not PYTHONOCC_AVAILABLE:
        print(f"ERROR: pythonOCC not available: {IMPORT_ERROR}")
        print("Install with: conda install -c conda-forge pythonocc-core")
        return False
    
    if not os.path.exists(stl_file):
        print(f"ERROR: STL file not found: {stl_file}")
        return False
    
    try:
        if verbose:
            print(f"Reading STL file: {stl_file}")
        
        # Read STL file
        shape = read_stl_file(stl_file)
        
        if shape is None or shape.IsNull():
            print(f"ERROR: Failed to read STL file or empty shape")
            return False
        
        if verbose:
            print(f"  Shape type: {shape.ShapeType()}")
            print(f"Writing STEP file: {step_file}")
        
        # Create STEP writer
        step_writer = STEPControl_Writer()
        
        # Set STEP format parameters
        Interface_Static.SetCVal("write.step.schema", "AP214")
        Interface_Static.SetCVal("write.step.unit", "MM")
        Interface_Static.SetIVal("write.precision.mode", 1)
        Interface_Static.SetRVal("write.precision.val", 0.001)
        
        # Transfer shape to STEP writer
        step_writer.Transfer(shape, STEPControl_AsIs)
        
        # Write STEP file
        status = step_writer.Write(step_file)
        
        if status != IFSelect_RetDone:
            print(f"ERROR: STEP write failed with status {status}")
            return False
        
        if verbose:
            file_size = os.path.getsize(step_file)
            print(f"  ✓ STEP file created: {step_file} ({file_size / 1024:.2f} KB)")
        
        return True
        
    except Exception as e:
        print(f"ERROR: Conversion failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def find_tower_test_dirs(base_dir):
    """Find all tower test output directories."""
    pattern = os.path.join(base_dir, "test_output_tower_N*")
    dirs = sorted(glob.glob(pattern))
    return dirs


def extract_n_from_dirname(dirname):
    """Extract N value from directory name like 'test_output_tower_N5'."""
    basename = os.path.basename(dirname)
    if basename.startswith("test_output_tower_N"):
        try:
            return int(basename.replace("test_output_tower_N", ""))
        except ValueError:
            return None
    return None


def convert_tower_tests(test_dir=None, n_value=None, verbose=True):
    """
    Convert tower test STL files to STEP format.
    
    Args:
        test_dir: Base directory containing test outputs (default: script directory)
        n_value: Specific N value to convert (default: all)
        verbose: Print progress messages
    
    Returns:
        dict: Results summary
    """
    if test_dir is None:
        # Default to script directory
        script_dir = os.path.dirname(os.path.abspath(__file__))
        test_dir = script_dir
    
    print("=" * 70)
    print("  Tower Test STL to STEP Converter")
    print("=" * 70)
    print()
    
    # Find tower test directories
    tower_dirs = find_tower_test_dirs(test_dir)
    
    if not tower_dirs:
        print(f"No tower test directories found in: {test_dir}")
        print(f"Looking for: test_output_tower_N*")
        return {"success": 0, "failed": 0, "skipped": 0}
    
    # Filter by N value if specified
    if n_value is not None:
        tower_dirs = [d for d in tower_dirs if extract_n_from_dirname(d) == n_value]
        if not tower_dirs:
            print(f"No tower test found for N={n_value}")
            return {"success": 0, "failed": 0, "skipped": 0}
    
    print(f"Found {len(tower_dirs)} tower test(s) to process:")
    for d in tower_dirs:
        n = extract_n_from_dirname(d)
        print(f"  - N={n}: {d}")
    print()
    
    # Convert each test
    results = {"success": 0, "failed": 0, "skipped": 0}
    
    for tower_dir in tower_dirs:
        n = extract_n_from_dirname(tower_dir)
        
        print(f"Processing tower test N={n}")
        print("-" * 70)
        
        # Find STL file
        stl_pattern = os.path.join(tower_dir, f"tower_N{n}.stl")
        stl_files = glob.glob(stl_pattern)
        
        if not stl_files:
            print(f"  ⚠ STL file not found: {stl_pattern}")
            results["skipped"] += 1
            print()
            continue
        
        stl_file = stl_files[0]
        step_file = os.path.join(tower_dir, f"tower_N{n}.step")
        
        # Check if STEP file already exists
        if os.path.exists(step_file):
            print(f"  ℹ STEP file already exists: {step_file}")
            response = input("    Overwrite? [y/N]: ").strip().lower()
            if response not in ['y', 'yes']:
                print("    Skipped.")
                results["skipped"] += 1
                print()
                continue
        
        # Convert
        success = convert_stl_to_step(stl_file, step_file, verbose=verbose)
        
        if success:
            results["success"] += 1
        else:
            results["failed"] += 1
        
        print()
    
    # Summary
    print("=" * 70)
    print("  Conversion Summary")
    print("=" * 70)
    print(f"Successful: {results['success']}")
    print(f"Failed:     {results['failed']}")
    print(f"Skipped:    {results['skipped']}")
    print(f"Total:      {results['success'] + results['failed'] + results['skipped']}")
    print()
    
    if results['success'] > 0:
        print("✓ Conversion completed!")
    elif results['failed'] > 0:
        print("✗ Some conversions failed")
    else:
        print("No conversions performed")
    
    return results


def main():
    """Main entry point."""
    # Check pythonOCC availability
    if not PYTHONOCC_AVAILABLE:
        print("=" * 70)
        print("  ERROR: pythonOCC not available")
        print("=" * 70)
        print()
        print(f"Import error: {IMPORT_ERROR}")
        print()
        print("To install pythonOCC:")
        print("  1. Install conda if not already installed")
        print("  2. Create conda environment:")
        print("     conda create -n pythonocc_env -c conda-forge pythonocc-core python=3.12")
        print("  3. Activate environment:")
        print("     conda activate pythonocc_env")
        print("  4. Run this script again")
        print()
        sys.exit(1)
    
    # Parse command line arguments
    n_value = None
    if len(sys.argv) > 1:
        try:
            n_value = int(sys.argv[1])
            if n_value < 3:
                print(f"ERROR: N must be >= 3, got N={n_value}")
                sys.exit(1)
        except ValueError:
            print(f"ERROR: Invalid N value: {sys.argv[1]}")
            print("Usage: python convert_tower_stl_to_step.py [N]")
            sys.exit(1)
    
    # Run conversion
    results = convert_tower_tests(n_value=n_value, verbose=True)
    
    # Exit with appropriate code
    if results['failed'] > 0:
        sys.exit(1)
    else:
        sys.exit(0)


if __name__ == "__main__":
    main()
